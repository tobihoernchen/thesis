from torch import nn
import torch
from collections import OrderedDict


class TransformerEncoderBlock(nn.Module):
    def __init__(self, embed_dim, n_heads, n_agents, activation=nn.ReLU) -> None:
        super().__init__()
        self.attention = nn.MultiheadAttention(
            embed_dim=embed_dim, num_heads=n_heads, batch_first=True
        )
        self.norm1 = nn.LayerNorm((n_agents, embed_dim))
        self.feedforward = nn.Sequential(
            nn.Linear(embed_dim, 4 * embed_dim),
            activation(),
            nn.Linear(4 * embed_dim, embed_dim),
            activation(),
        )
        self.norm2 = nn.LayerNorm((n_agents, embed_dim))

    def forward(self, x):
        attended = self.attention(x, x, x, need_weights=False)[0]
        x = x + attended
        normed1 = self.norm1(x)
        fedforward = self.feedforward(normed1)
        x = fedforward + x
        normed2 = self.norm2(x)
        return normed2


class TransformerDecoderBlock(nn.Module):
    def __init__(self, embed_dim, n_heads, n_agents, activation=nn.ReLU) -> None:
        super().__init__()
        self.self_attention = nn.MultiheadAttention(
            embed_dim=embed_dim, num_heads=n_heads, batch_first=True
        )
        self.norm1 = nn.LayerNorm((n_agents, embed_dim))
        self.attention = nn.MultiheadAttention(
            embed_dim=embed_dim, num_heads=n_heads, batch_first=True
        )
        self.norm2 = nn.LayerNorm((n_agents, embed_dim))
        self.feedforward = nn.Sequential(
            nn.Linear(embed_dim, 4 * embed_dim),
            activation(),
            nn.Linear(4 * embed_dim, embed_dim),
            activation(),
        )
        self.norm3 = nn.LayerNorm((n_agents, embed_dim))

    def forward(self, inputs, outputs):
        self_attended = self.self_attention(
            outputs, outputs, outputs, need_weights=False
        )[0]
        x = outputs + self_attended
        normed1 = self.norm1(x)
        attended = self.attention(normed1, inputs, inputs, need_weights=False)[0]
        x = attended + x
        normed2 = self.norm2(x)
        fedforward = self.feedforward(normed2)
        x = fedforward + x
        normed3 = self.norm3(x)
        return normed3


class Graph(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.nodes = nn.Parameter(
            torch.tensor(
                [coords for i, coords in self.init_nodes().items()] + [(0, 0)]
            ),
            requires_grad=False,
        )
        self.paths = nn.Parameter(
            torch.tensor(self.init_paths()).t().contiguous().to(dtype=torch.long),
            requires_grad=False,
        )
        self.indices = nn.Parameter(
            torch.arange(0, self.nodes.shape[0]), requires_grad=False
        )
        self.register_parameter("nodes", self.nodes)
        self.register_parameter("paths", self.paths)
        self.register_parameter("indices", self.indices)

    def init_nodes(self):
        return OrderedDict([])

    def init_paths(self):
        return []

    def get_node_indices(self, nodes: torch.Tensor):
        original_shape = nodes.shape
        points = nodes.reshape(-1, 2)
        points_rep = points[:, None, :].repeat(1, len(self.nodes), 1)
        nodes_rep = self.nodes.repeat(len(points), 1, 1)
        choice = torch.all(points_rep == nodes_rep, axis=2)
        indices = self.indices.repeat(len(points), 1)[choice].reshape(
            original_shape[:-1]
        )
        return indices


class PointEmbedding(nn.Module):
    """Input:  (*, 2)
    Output: (*, embed_size)
    creates an embedding based on 2D-points
    """

    def __init__(self, max_len=200, embed_size=2) -> None:
        super().__init__()
        self.hwm = nn.Parameter(torch.Tensor([0]), requires_grad=False)
        self.nodes = nn.Parameter(-torch.ones((max_len, 2)), requires_grad=False)
        self.indices = nn.Parameter(torch.arange(0, max_len), requires_grad=False)
        self.register_parameter("nodes", self.nodes)
        self.register_parameter("HWM", self.hwm)
        self.register_parameter("indices", self.indices)
        self.embedding = nn.Embedding(max_len, embed_size)

    def _add_nodes(self, new_nodes):
        assert int(self.hwm) + len(new_nodes) <= len(self.nodes)
        self.nodes[int(self.hwm) : int(self.hwm[0]) + len(new_nodes)] = new_nodes
        self.hwm += len(new_nodes)

    def forward(self, points: torch.Tensor) -> torch.Tensor:
        orig_dim = points.shape
        points = (
            points.reshape(orig_dim[:-1].numel(), 2)
            .to(dtype=torch.float)
            .round(decimals=4)
        )
        points_rep = points[:, None, :].repeat(1, len(self.nodes), 1)
        while True:
            nodes_rep = self.nodes.repeat(len(points), 1, 1)
            choice = torch.all(points_rep == nodes_rep, axis=2)
            not_anyone = torch.logical_not(torch.any(choice, axis=1))
            if not_anyone.any():
                self._add_nodes(points[not_anyone].unique(dim=0))
            else:
                break
        indices = (
            self.indices.repeat(len(points), 1)[choice].reshape(orig_dim[:-1]).detach()
        )
        return self.embedding(indices).detach()


class MatrixPositionEncoder(nn.Module):
    """Inputs: (*, x)
    Output: (*, x + len(pos_cols) * embed_size)
    """

    def __init__(self, embed_size, resolution=200) -> None:
        super().__init__()
        self.pointembedder = PointEmbedding(max_len=resolution, embed_size=embed_size)

    def forward(self, x: torch.Tensor, pos_cols):
        pos_cols = torch.Tensor([[p, p + 1] for p in pos_cols]).to(dtype=torch.long)
        orig_dim = x.shape
        to_embed = x[..., pos_cols]
        to_embed = to_embed.reshape(int(to_embed.numel() / 2), 2).detach()
        embedded = self.pointembedder(to_embed)
        back_in_shape = embedded.reshape(
            orig_dim[:-1] + (int(embedded.shape.numel() / orig_dim[:-1].numel()),)
        )
        return torch.concat([x, back_in_shape], dim=-1)


class MatrixGraph(Graph):
    def __init__(self) -> None:
        super().__init__()

    def init_nodes(self):
        return OrderedDict(
            [
                (0, (0.23076923076923078, 0.5045871559633027)),
                (1, (0.20118343195266272, 0.5045871559633027)),
                (2, (0.20118343195266272, 0.5504587155963303)),
                (3, (0.23076923076923078, 0.5504587155963303)),
                (4, (0.15384615384615385, 0.5229357798165137)),
                (5, (0.20118343195266272, 0.3724770642201835)),
                (6, (0.23076923076923078, 0.3724770642201835)),
                (7, (0.23076923076923078, 0.326605504587156)),
                (8, (0.20118343195266272, 0.326605504587156)),
                (9, (0.15384615384615385, 0.3486238532110092)),
                (10, (0.27218934911242604, 0.5045871559633027)),
                (11, (0.30177514792899407, 0.5045871559633027)),
                (12, (0.30177514792899407, 0.5504587155963303)),
                (13, (0.27218934911242604, 0.5504587155963303)),
                (14, (0.2875739644970414, 0.6146788990825688)),
                (15, (0.38461538461538464, 0.5504587155963303)),
                (16, (0.41420118343195267, 0.5504587155963303)),
                (17, (0.41420118343195267, 0.5045871559633027)),
                (18, (0.38461538461538464, 0.5045871559633027)),
                (19, (0.4, 0.44036697247706424)),
                (20, (0.5029585798816568, 0.5045871559633027)),
                (21, (0.5325443786982249, 0.5045871559633027)),
                (22, (0.5325443786982249, 0.5504587155963303)),
                (23, (0.5029585798816568, 0.5504587155963303)),
                (24, (0.5183431952662721, 0.6146788990825688)),
                (25, (0.621301775147929, 0.5504587155963303)),
                (26, (0.650887573964497, 0.5504587155963303)),
                (27, (0.650887573964497, 0.5045871559633027)),
                (28, (0.621301775147929, 0.5045871559633027)),
                (29, (0.6366863905325444, 0.44036697247706424)),
                (30, (0.7396449704142012, 0.5045871559633027)),
                (31, (0.7692307692307693, 0.5045871559633027)),
                (32, (0.7692307692307693, 0.5504587155963303)),
                (33, (0.7396449704142012, 0.5504587155963303)),
                (34, (0.7550295857988165, 0.6146788990825688)),
                (35, (0.8461538461538461, 0.5504587155963303)),
                (36, (0.893491124260355, 0.5504587155963303)),
                (37, (0.893491124260355, 0.5045871559633027)),
                (38, (0.8461538461538461, 0.5045871559633027)),
                (39, (0.8733727810650888, 0.6146788990825688)),
                (40, (0.7550295857988165, 0.44036697247706424)),
                (41, (0.6366863905325444, 0.6146788990825688)),
                (42, (0.5183431952662721, 0.44036697247706424)),
                (43, (0.4, 0.6146788990825688)),
                (44, (0.2875739644970414, 0.44036697247706424)),
                (45, (0.23076923076923078, 0.6844036697247706)),
                (46, (0.23076923076923078, 0.7302752293577982)),
                (47, (0.20118343195266272, 0.7302752293577982)),
                (48, (0.20118343195266272, 0.6844036697247706)),
                (49, (0.15384615384615385, 0.7064220183486238)),
                (50, (0.23076923076923078, 0.8678899082568807)),
                (51, (0.23076923076923078, 0.9137614678899083)),
                (52, (0.20118343195266272, 0.9137614678899083)),
                (53, (0.20118343195266272, 0.8678899082568807)),
                (54, (0.15384615384615385, 0.8899082568807339)),
                (55, (0.20118343195266272, 0.1798165137614679)),
                (56, (0.23076923076923078, 0.1798165137614679)),
                (57, (0.23076923076923078, 0.13394495412844037)),
                (58, (0.20118343195266272, 0.13394495412844037)),
                (59, (0.15384615384615385, 0.1559633027522936)),
                (60, (0.9230769230769231, 0.5504587155963303)),
                (61, (0.9526627218934911, 0.5504587155963303)),
                (62, (0.9526627218934911, 0.5045871559633027)),
                (63, (0.9230769230769231, 0.5045871559633027)),
                (64, (0.9230769230769231, 0.46238532110091746)),
                (65, (0.9526627218934911, 0.46238532110091746)),
                (66, (0.9526627218934911, 0.42201834862385323)),
                (67, (0.9230769230769231, 0.42201834862385323)),
                (68, (0.9230769230769231, 0.27522935779816515)),
                (69, (0.9526627218934911, 0.27522935779816515)),
                (70, (0.9526627218934911, 0.22935779816513763)),
                (71, (0.9230769230769231, 0.22935779816513763)),
                (72, (0.9230769230769231, 0.10642201834862386)),
                (73, (0.9526627218934911, 0.10642201834862386)),
                (74, (0.9526627218934911, 0.060550458715596334)),
                (75, (0.9230769230769231, 0.060550458715596334)),
                (76, (1.0, 0.08256880733944955)),
                (77, (1.0, 0.25137614678899084)),
                (78, (1.0, 0.44403669724770645)),
                (79, (0.9230769230769231, 0.6055045871559633)),
                (80, (0.9526627218934911, 0.6055045871559633)),
                (81, (0.9526627218934911, 0.6513761467889908)),
                (82, (0.9230769230769231, 0.6513761467889908)),
                (83, (1.0, 0.6275229357798165)),
                (84, (0.9526627218934911, 0.7889908256880734)),
                (85, (0.9526627218934911, 0.8348623853211009)),
                (86, (0.9230769230769231, 0.8348623853211009)),
                (87, (0.9230769230769231, 0.7889908256880734)),
                (88, (0.9230769230769231, 0.9541284403669725)),
                (89, (0.9230769230769231, 1.0)),
                (90, (0.9526627218934911, 1.0)),
                (91, (0.9526627218934911, 0.9541284403669725)),
                (92, (1.0, 0.8110091743119267)),
                (93, (1.0, 0.9761467889908257)),
                (94, (0.8461538461538461, 0.44036697247706424)),
                (95, (0.893491124260355, 0.44036697247706424)),
                (96, (0.893491124260355, 0.3944954128440367)),
                (97, (0.893491124260355, 0.3486238532110092)),
                (98, (0.893491124260355, 0.30275229357798167)),
                (99, (0.893491124260355, 0.25688073394495414)),
                (100, (0.8461538461538461, 0.3944954128440367)),
                (101, (0.8461538461538461, 0.3486238532110092)),
                (102, (0.8461538461538461, 0.30275229357798167)),
                (103, (0.8461538461538461, 0.25688073394495414)),
                (104, (0.8698224852071006, 0.25688073394495414)),
                (105, (0.8698224852071006, 0.30275229357798167)),
                (106, (0.8698224852071006, 0.3486238532110092)),
                (107, (0.8698224852071006, 0.3944954128440367)),
                (108, (0.8698224852071006, 0.44036697247706424)),
            ]
        )

    def init_paths(self):
        return [
            (1, 0),
            (0, 1),
            (1, 2),
            (2, 1),
            (2, 3),
            (3, 2),
            (0, 3),
            (3, 0),
            (4, 2),
            (2, 4),
            (4, 1),
            (1, 4),
            (5, 1),
            (1, 5),
            (5, 6),
            (6, 5),
            (6, 0),
            (0, 6),
            (7, 6),
            (6, 7),
            (8, 7),
            (7, 8),
            (8, 5),
            (5, 8),
            (9, 8),
            (8, 9),
            (5, 9),
            (9, 5),
            (10, 0),
            (0, 10),
            (10, 11),
            (11, 10),
            (11, 12),
            (12, 11),
            (13, 12),
            (12, 13),
            (10, 13),
            (13, 10),
            (13, 14),
            (14, 13),
            (12, 14),
            (14, 12),
            (12, 15),
            (15, 12),
            (15, 16),
            (16, 15),
            (17, 16),
            (16, 17),
            (18, 17),
            (17, 18),
            (18, 11),
            (11, 18),
            (18, 15),
            (15, 18),
            (18, 19),
            (19, 18),
            (19, 17),
            (17, 19),
            (17, 20),
            (20, 17),
            (20, 21),
            (21, 20),
            (21, 22),
            (22, 21),
            (23, 22),
            (22, 23),
            (16, 23),
            (23, 16),
            (20, 23),
            (23, 20),
            (23, 24),
            (24, 23),
            (22, 24),
            (24, 22),
            (22, 25),
            (25, 22),
            (25, 26),
            (26, 25),
            (27, 26),
            (26, 27),
            (28, 27),
            (27, 28),
            (21, 28),
            (28, 21),
            (28, 25),
            (25, 28),
            (28, 29),
            (29, 28),
            (29, 27),
            (27, 29),
            (27, 30),
            (30, 27),
            (30, 31),
            (31, 30),
            (31, 32),
            (32, 31),
            (33, 32),
            (32, 33),
            (26, 33),
            (33, 26),
            (30, 33),
            (33, 30),
            (33, 34),
            (34, 33),
            (32, 34),
            (34, 32),
            (32, 35),
            (35, 32),
            (35, 36),
            (36, 35),
            (37, 36),
            (36, 37),
            (38, 37),
            (37, 38),
            (31, 38),
            (38, 31),
            (38, 35),
            (35, 38),
            (36, 39),
            (39, 36),
            (35, 39),
            (39, 35),
            (40, 31),
            (31, 40),
            (30, 40),
            (40, 30),
            (26, 41),
            (41, 26),
            (25, 41),
            (41, 25),
            (42, 21),
            (21, 42),
            (20, 42),
            (42, 20),
            (16, 43),
            (43, 16),
            (15, 43),
            (43, 15),
            (44, 11),
            (11, 44),
            (10, 44),
            (44, 10),
            (3, 13),
            (13, 3),
            (3, 45),
            (45, 3),
            (45, 46),
            (46, 45),
            (47, 46),
            (46, 47),
            (48, 47),
            (47, 48),
            (48, 45),
            (45, 48),
            (49, 48),
            (48, 49),
            (47, 49),
            (49, 47),
            (2, 48),
            (48, 2),
            (46, 50),
            (50, 46),
            (50, 51),
            (51, 50),
            (52, 51),
            (51, 52),
            (53, 52),
            (52, 53),
            (53, 50),
            (50, 53),
            (54, 53),
            (53, 54),
            (52, 54),
            (54, 52),
            (47, 53),
            (53, 47),
            (8, 55),
            (55, 8),
            (55, 56),
            (56, 55),
            (57, 56),
            (56, 57),
            (58, 57),
            (57, 58),
            (58, 55),
            (55, 58),
            (59, 58),
            (58, 59),
            (55, 59),
            (59, 55),
            (7, 56),
            (56, 7),
            (36, 60),
            (60, 36),
            (60, 61),
            (61, 60),
            (62, 61),
            (61, 62),
            (63, 62),
            (62, 63),
            (64, 63),
            (63, 64),
            (64, 65),
            (65, 64),
            (66, 65),
            (65, 66),
            (67, 66),
            (66, 67),
            (68, 67),
            (67, 68),
            (68, 69),
            (69, 68),
            (70, 69),
            (69, 70),
            (71, 70),
            (70, 71),
            (72, 71),
            (71, 72),
            (72, 73),
            (73, 72),
            (74, 73),
            (73, 74),
            (75, 74),
            (74, 75),
            (75, 72),
            (72, 75),
            (74, 76),
            (76, 74),
            (73, 76),
            (76, 73),
            (73, 70),
            (70, 73),
            (71, 68),
            (68, 71),
            (70, 77),
            (77, 70),
            (69, 77),
            (77, 69),
            (69, 66),
            (66, 69),
            (67, 64),
            (64, 67),
            (66, 78),
            (78, 66),
            (65, 78),
            (78, 65),
            (65, 62),
            (62, 65),
            (63, 60),
            (60, 63),
            (37, 63),
            (63, 37),
            (79, 60),
            (60, 79),
            (79, 80),
            (80, 79),
            (80, 81),
            (81, 80),
            (82, 81),
            (81, 82),
            (79, 82),
            (82, 79),
            (61, 80),
            (80, 61),
            (80, 83),
            (83, 80),
            (81, 83),
            (83, 81),
            (81, 84),
            (84, 81),
            (84, 85),
            (85, 84),
            (86, 85),
            (85, 86),
            (87, 86),
            (86, 87),
            (87, 84),
            (84, 87),
            (87, 82),
            (82, 87),
            (86, 88),
            (88, 86),
            (88, 89),
            (89, 88),
            (89, 90),
            (90, 89),
            (91, 90),
            (90, 91),
            (88, 91),
            (91, 88),
            (85, 91),
            (91, 85),
            (84, 92),
            (92, 84),
            (85, 92),
            (92, 85),
            (91, 93),
            (93, 91),
            (90, 93),
            (93, 90),
            (38, 94),
            (94, 38),
            (37, 95),
            (95, 37),
            (96, 95),
            (95, 96),
            (97, 96),
            (96, 97),
            (98, 97),
            (97, 98),
            (99, 98),
            (98, 99),
            (100, 94),
            (94, 100),
            (101, 100),
            (100, 101),
            (102, 101),
            (101, 102),
            (103, 102),
            (102, 103),
            (103, 104),
            (104, 103),
            (104, 99),
            (99, 104),
            (102, 105),
            (105, 102),
            (105, 98),
            (98, 105),
            (101, 106),
            (106, 101),
            (100, 107),
            (107, 100),
            (94, 108),
            (108, 94),
            (106, 97),
            (97, 106),
            (107, 96),
            (96, 107),
            (108, 95),
            (95, 108),
        ]


class MiniMatrixGraph(Graph):
    def __init__(self) -> None:
        super().__init__()

    def init_nodes(self):
        return OrderedDict(
            [
                (0, (0.5454545454545454, 0.76)),
                (1, (0.6022727272727273, 0.76)),
                (2, (0.5454545454545454, 0.86)),
                (3, (0.6022727272727273, 0.86)),
                (4, (0.4772727272727273, 0.76)),
                (5, (0.42045454545454547, 0.76)),
                (6, (0.42045454545454547, 0.86)),
                (7, (0.4772727272727273, 0.86)),
                (8, (0.32954545454545453, 0.808)),
                (9, (0.42045454545454547, 0.48)),
                (10, (0.4772727272727273, 0.48)),
                (11, (0.4772727272727273, 0.38)),
                (12, (0.42045454545454547, 0.38)),
                (13, (0.32954545454545453, 0.428)),
                (14, (0.5727272727272728, 0.62)),
                (15, (0.7613636363636364, 0.76)),
                (16, (0.8181818181818182, 0.76)),
                (17, (0.8181818181818182, 0.86)),
                (18, (0.7613636363636364, 0.86)),
                (19, (0.7909090909090909, 0.62)),
                (20, (0.9431818181818182, 0.76)),
                (21, (1.0, 0.76)),
                (22, (1.0, 0.86)),
                (23, (0.9431818181818182, 0.86)),
                (24, (0.9727272727272728, 0.62)),
                (25, (0.9727272727272728, 1.0)),
            ]
        )

    def init_paths(self):
        return [
            (0, 1),
            (1, 0),
            (0, 2),
            (2, 0),
            (2, 3),
            (3, 2),
            (1, 3),
            (3, 1),
            (4, 0),
            (0, 4),
            (5, 4),
            (4, 5),
            (5, 6),
            (6, 5),
            (6, 7),
            (7, 6),
            (4, 7),
            (7, 4),
            (8, 6),
            (6, 8),
            (8, 5),
            (5, 8),
            (5, 9),
            (9, 5),
            (9, 10),
            (10, 9),
            (10, 4),
            (4, 10),
            (11, 10),
            (10, 11),
            (12, 11),
            (11, 12),
            (12, 9),
            (9, 12),
            (13, 12),
            (12, 13),
            (13, 9),
            (9, 13),
            (2, 7),
            (7, 2),
            (0, 14),
            (14, 0),
            (14, 1),
            (1, 14),
            (1, 15),
            (15, 1),
            (15, 16),
            (16, 15),
            (16, 17),
            (17, 16),
            (18, 17),
            (17, 18),
            (15, 18),
            (18, 15),
            (18, 3),
            (3, 18),
            (15, 19),
            (19, 15),
            (19, 16),
            (16, 19),
            (16, 20),
            (20, 16),
            (20, 21),
            (21, 20),
            (21, 22),
            (22, 21),
            (23, 22),
            (22, 23),
            (20, 23),
            (23, 20),
            (23, 17),
            (17, 23),
            (24, 20),
            (20, 24),
            (24, 21),
            (21, 24),
            (25, 23),
            (23, 25),
            (22, 25),
            (25, 22),
        ]
